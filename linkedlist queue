#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node* next;
}*front,*rear;
struct node* createnode(int val)
{
    struct node* newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=val;
    if(newnode==NULL)
    {
        printf("\nQueue is full");
        return NULL;
    }
    newnode->next=NULL;
    return newnode;
};
void enqueue()
{
    printf("Enter the value to be enqueued: ");
    int val;scanf("%d",&val);
    struct node* t=createnode(val);
    if(t==NULL){
        return;
    }
    else{
        if(front==NULL){
            front=rear=t;
        }
        else{
            rear->next=t;
            rear=t;
        }
    }
}
int dequeue()
{
    int x=-1;
    if(front==NULL)
    {
        printf("\nQueue is empty");
        return x;
    }
    struct node* p=front;
    front=front->next;
    x=p->data;
    free(p);
    return x;

}
void display()
{
    if(front==NULL)
    {
        printf("\nQueue is empty");
        return;
    }
    struct node* ptr;
    printf("\nElements are:\n");
    for(ptr=front;ptr!=NULL;ptr=ptr->next)
    {
        printf("%d ",ptr->data);
    }
}
int main()
{
    int option,x=0;
    do
    {
        printf("\n------------------");
        printf("\n1-Enqueue\n2-Dequeue\n3-Display");
        printf("\n------------------");
        printf("\nEnter your choice: ");
        scanf("%d",&option);
        switch(option)
        {
        case 0:
            break;
        case 1:
            enqueue();
            break;
        case 2:
            x=dequeue();
            if(x==-1)
            {
                break;
            }
            else{
                printf("Dequeued value is: %d",x);
            }
            break;
        case 3:
            display();
            break;
        default:
            printf("\nEnter the correct option");
        }
    }while(option!=0);
}
